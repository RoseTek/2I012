
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pyscanYY_create_buffer
#define yy_delete_buffer pyscanYY_delete_buffer
#define yy_flex_debug pyscanYY_flex_debug
#define yy_init_buffer pyscanYY_init_buffer
#define yy_flush_buffer pyscanYY_flush_buffer
#define yy_load_buffer_state pyscanYY_load_buffer_state
#define yy_switch_to_buffer pyscanYY_switch_to_buffer
#define yyin pyscanYYin
#define yyleng pyscanYYleng
#define yylex pyscanYYlex
#define yylineno pyscanYYlineno
#define yyout pyscanYYout
#define yyrestart pyscanYYrestart
#define yytext pyscanYYtext
#define yywrap pyscanYYwrap
#define yyalloc pyscanYYalloc
#define yyrealloc pyscanYYrealloc
#define yyfree pyscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pyscanYYrestart(pyscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int pyscanYYleng;

extern FILE *pyscanYYin, *pyscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pyscanYYrestart()), so that the user can continue scanning by
	 * just pointing pyscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pyscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int pyscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pyscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh pyscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pyscanYYrestart (FILE *input_file  );
void pyscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pyscanYY_create_buffer (FILE *file,int size  );
void pyscanYY_delete_buffer (YY_BUFFER_STATE b  );
void pyscanYY_flush_buffer (YY_BUFFER_STATE b  );
void pyscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pyscanYYpop_buffer_state (void );

static void pyscanYYensure_buffer_stack (void );
static void pyscanYY_load_buffer_state (void );
static void pyscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pyscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pyscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pyscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pyscanYY_scan_bytes (yyconst char *bytes,int len  );

void *pyscanYYalloc (yy_size_t  );
void *pyscanYYrealloc (void *,yy_size_t  );
void pyscanYYfree (void *  );

#define yy_new_buffer pyscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pyscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pyscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pyscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pyscanYYin = (FILE *) 0, *pyscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int pyscanYYlineno;

int pyscanYYlineno = 1;

extern char *pyscanYYtext;
#define yytext_ptr pyscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pyscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pyscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 152
#define YY_END_OF_BUFFER 153
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[749] =
    {   0,
    16482,16482,  100,  100,   25,   25,   31,   31,   36,   36,
      153,  151,  152,  150,  152,   21,  151,  152,   17,  150,
      152,   12,   21,  151,  152,   21,  151,  152,   11,   21,
      151,  152,   21,  151,  152,   15,   21,  151,  152,   15,
       21,  151,  152,   15,   21,  151,  152,   15,   21,  151,
      152,   15,   21,  151,  152,   16,   21,  151,  152,   15,
       21,  151,  152,16393,16394,   15,   21,  151,  152,16393,
    16394,   15,   21,  151,  152,16393,16394,   15,   21,  151,
      152,16393,16394,   15,   21,  151,  152,16393,16394,   47,
       48,  151,  152,   45,  150,  152,   44,   48,  151,  152,

       48,  151,  152,   43,   48,  151,  152,   48,  151,  152,
       46,   48,  151,  152,   46,   48,  151,  152,  125,  127,
      151,  152,  127,  151,  152,  126,  150,  152,  127,  151,
      152,  127,  151,  152,  124,  127,  151,  152,  130,  132,
      151,  152,  131,  150,  152,  132,  151,  152,  130,  132,
      151,  152,  128,  132,  151,  152,  151,  152,   65,  151,
      152,   64,  151,  152,   63,  151,  152,   72,  151,  152,
       66,  151,  152,   72,  151,  152,   69,  151,  152,   66,
       72,  151,  152,   70,  151,  152,   68,   72,  151,  152,
       67,   72,  151,  152,   55,   59,  151,  152,   59,  151,

      152,   58,  150,  152,16433,   54,   59,  151,  152,   57,
       59,  151,  152,   53,   59,  151,  152,   52,   59,  151,
      152,   57,   59,  151,  152,   76,  151,  152,   77,  150,
      152,   73,   76,  151,  152,   75,   76,  151,  152,   74,
       76,  151,  152,   90,  151,  152,   91,  151,  152,   91,
      151,  152,   92,  151,  152,   93,  151,  152,  151,  152,
       94,  150,  152, 8290,  151,  152,  151,  152,  151,  152,
       97,  151,  152,   84,   87,  151,  152,   87,  151,  152,
       85,  150,  152,   83,   87,  151,  152,   87,  151,  152,
       82,   87,  151,  152,   81,   87,  151,  152,  112,  151,

      152,  100,  112,  151,  152,  113,  150,  152,  104,  112,
      151,  152,  110,  112,  151,  152,  103,  112,  151,  152,
      107,  112,  151,  152,  101,  112,  151,  152,  101,  112,
      151,  152,   99,  112,  151,  152,  111,  112,  151,  152,
      111,  112,  151,  152,  111,  112,  151,  152,  108,  112,
      151,  152,  109,  112,  151,  152,  121,  151,  152,  120,
      150,  152,  118,  151,  152,  119,  150,  152,  116,  118,
      151,  152,  114,  118,  151,  152,  115,  118,  151,  152,
      117,  118,  151,  152,  137,  138,  151,  152,  138,  151,
      152,  136,  138,  151,  152,  138,  151,  152,  143,  144,

      151,  152,  142,  144,  151,  152,  144,  151,  152,  144,
      151,  152,  147,  149,  151,  152,  147,  148,  150,  152,
      147,  149,  151,  152,  147,  149,  151,  152,  149,  151,
      152,   26,  151,  152,   25,   26,  151,  152,   24,  150,
      152,   22,   26,  151,  152,   22,   26,  151,  152,   33,
      151,  152,   31,   33,  151,  152,   30,  150,  152,   27,
       33,  151,  152,   32,   33,  151,  152,   29,   33,  151,
      152,16412,   37,  151,  152,   36,   37,  151,  152,   35,
      150,  152,   34,   37,  151,  152,   17,   14,   15,   15,
       15,   15,   15,   16,16393,16394,16393,16394,16393,16394,

    16393,16394,16393,16394,   15,16393,16394,   15,16393,16394,
       15,16393,16394,   15,16393,16394,   15,16393,16394,   47,
       42,   46,   46,  125,  124,  130,  129,  130,  128,  128,
       65,   64,   63,   66,   71,   70,   67,   55,16433,   57,
       57,   52,   51,   56,   57,   90,   91,   93,   94,   97,
       84,   86,   81,   80,  100,  110,  101,  101,  101,  111,
      104,  103,  111,  117,  137,  134,  134,  133,  143,  140,
      140,  139,  147,  147,  147,   25,   22,   22,   31, 8220,
       29,16412,   36,   34,   18,   14,   20,   19,   15,   15,
       15,   15,16393,16394,16393,16394,16393,16394,16393,16394,

    16393,16394, 8202, 8202, 8202,   15,16393,16394,   15,16393,
    16394,   15,16393,16394,   15,16393,16394,   39,   42,   41,
       40,   46,  122,  123,   71,   50, 8241,   60,   57,   62,
       62,   61,   56,   57,   93,   95,   96,   78,   88,   86,
       89,  105,  106,  102,  101,  101,  135,  141,  145,  146,
       22,   22, 8220,   34,   18,   19,   15,    2,   15,   15,
    16393,16394,16393,16394,16393,16394,16393,16394,   15,16393,
    16394,    1,    2,   15,16393,16394,   15,16393,16394,   39,
       40,   46,  122,  123,   60,   61,   93,   95,   96,   79,
       88,   89,  105,  106,  102,  101,  145,  146,   22,   22,

       34,   15,    6,   15,16393,16394,    1,16393,16394,16393,
    16394,   15,16393,16394,    5,    6,   15,16393,16394,  102,
       22,    4,   15,16393,16394,    5,16393,16394,    3,    4,
       15,16393,16394,16422,   22,   23,    8,    3,16393,16394,
        7,    8,16422, 8230,   23,    7, 8201,   13
    } ;

static yyconst flex_int16_t yy_accept[451] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    8,    9,   10,   11,   12,   14,   16,
       19,   22,   26,   29,   33,   36,   40,   44,   48,   52,
       56,   60,   66,   72,   78,   84,   90,   94,   97,  101,
      104,  108,  111,  115,  119,  123,  126,  129,  132,  135,
      139,  143,  146,  149,  153,  157,  159,  162,  165,  168,
      171,  174,  177,  180,  184,  187,  191,  195,  199,  202,

      206,  210,  214,  218,  222,  226,  229,  232,  236,  240,
      244,  247,  250,  253,  256,  259,  261,  264,  267,  269,
      271,  274,  278,  281,  284,  288,  291,  295,  299,  302,
      306,  309,  313,  317,  321,  325,  329,  333,  337,  341,
      345,  349,  353,  357,  360,  363,  366,  369,  373,  377,
      381,  385,  389,  392,  396,  399,  403,  407,  410,  413,
      417,  421,  425,  429,  432,  435,  439,  442,  446,  450,
      453,  457,  460,  464,  468,  473,  476,  480,  483,  487,
      488,  488,  489,  489,  489,  489,  490,  491,  492,  493,
      494,  495,  497,  499,  501,  503,  505,  505,  508,  508,

      511,  514,  517,  520,  521,  521,  522,  522,  522,  523,
      524,  525,  525,  525,  526,  527,  527,  528,  529,  530,
      531,  531,  532,  533,  534,  535,  536,  537,  538,  539,
      540,  540,  540,  540,  541,  542,  542,  543,  544,  546,
      547,  548,  548,  549,  549,  550,  550,  550,  551,  552,
      552,  552,  552,  553,  553,  554,  555,  556,  556,  557,
      557,  557,  558,  559,  560,  560,  561,  562,  563,  564,
      565,  566,  566,  567,  568,  569,  570,  570,  571,  572,
      573,  574,  574,  575,  576,  577,  577,  577,  578,  579,
      580,  580,  581,  583,  584,  584,  584,  585,  586,  587,

      588,  589,  589,  590,  591,  592,  593,  595,  597,  599,
      601,  603,  604,  605,  606,  609,  612,  615,  618,  619,
      620,  621,  622,  623,  624,  625,  626,  627,  628,  628,
      629,  631,  632,  633,  635,  636,  637,  638,  638,  639,
      639,  640,  641,  642,  643,  644,  645,  646,  647,  648,
      648,  649,  649,  650,  651,  651,  652,  653,  654,  654,
      655,  656,  657,  657,  658,  659,  660,  661,  663,  665,
      667,  669,  669,  669,  669,  672,  674,  677,  680,  681,
      682,  683,  684,  685,  686,  687,  688,  689,  690,  691,
      692,  693,  694,  695,  695,  696,  697,  698,  699,  700,

      701,  702,  702,  703,  704,  705,  707,  708,  710,  712,
      712,  715,  717,  720,  720,  720,  721,  722,  722,  723,
      724,  726,  727,  729,  729,  731,  734,  735,  737,  737,
      738,  739,  741,  741,  743,  743,  744,  745,  746,  746,
      747,  747,  747,  747,  747,  748,  748,  748,  749,  749
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
       10,   11,   12,   13,   12,   14,    7,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,    7,    7,
       19,    7,    1,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   27,   31,   32,   27,   33,   34,
       27,   35,   36,   37,   38,   27,   27,   39,   40,   27,
       41,   42,   43,    1,   44,    7,   45,   22,   46,   47,

       48,   49,   27,   50,   51,   30,   27,   52,   53,   27,
       54,   55,   27,   56,   57,   58,   59,   27,   27,   39,
       60,   27,   61,    7,   43,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[62] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    4,    1,    1,
        1,    1,    6,    7,    8,    8,    8,    1,    9,    1,
       10,   10,   10,   10,   10,   10,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        1,   12,    1,   11,   10,   10,   10,   10,   10,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        1
    } ;

static yyconst flex_int16_t yy_base[545] =
    {   0,
     1731, 1730,    0,   61,  122,    0, 1726, 1725,  182,  186,
      189,  194,  200,    0,  261,    0,  321,  328,  334,  336,
      349,    0,  410,    0,  471,  479,  487,  495,  503,    0,
     1724, 1723,  564,    0,  623,  624,  630,  631,  637,  638,
      680,    0,  741,    0,  802,    0, 1725, 2169, 2169, 2169,
     1721, 1718, 1713, 1702,  439,    0,  599,  300,  602,  615,
      862,  475,  863,  864,  865,  871,    0, 2169, 1691, 1685,
     1680, 2169,    0,  619,    0, 2169, 2169, 1682, 1678, 1683,
        0,  326, 2169,  646, 1675,  651, 2169, 2169,    0, 2169,
     1677,    0, 2169, 2169, 1675, 2169,    0,    0, 2169,  648,

     1671, 1669, 1663,  196, 1662, 2169, 2169, 2169, 2169, 2169,
        0, 1665, 2169, 2169, 1652,  338, 2169, 2169, 1660, 1647,
      483,    0, 2169, 1626, 1626,    0, 1601,  653, 2169, 1606,
     2169, 1598,    0, 1591, 2169,  862,  902, 2169,    0,  654,
      864, 2169, 2169, 2169, 2169, 2169, 2169, 2169, 2169, 2169,
        0,    0, 1583, 2169,  661,    0, 2169, 1570,  668, 1534,
     1529, 1565, 1561,  899, 2169, 1566, 2169,  647,  873, 2169,
     1557, 2169, 2169, 2169,  868, 2169, 1556, 2169,  866, 1554,
     1551,    0,    0, 1544,  620,    0,  457,  848,  873,  876,
      920,  921,  926,  928,  923,  932,  933,  936,  927,  954,

      946,  958,  968,    0, 1542,    0,    0, 1528,    0,  910,
        0, 1519, 1511, 1516,    0,  957, 2169,  978, 1511, 1510,
      972, 2169, 2169,    0, 1512,    0, 1511,    0,    0,  986,
     1500, 1502, 1498,    0,  671, 1494,  673, 2169,    0,    0,
     1499,    0, 1483,  893, 2169, 1483, 1478,  934,    0, 1475,
     1470, 1465,    0, 1451,  991, 2169, 1456, 1452,    0, 1445,
      981,  989,  994, 2169,    0,    0, 2169, 2169,  978,    0,
        0, 1437, 2169,  998, 2169,    0, 1430, 2169, 1011, 2169,
     1395, 1013, 1429, 1424, 1429, 1013, 1428, 1015, 1020, 1421,
      937, 1420, 1024, 1419, 1026, 1418, 1028, 1415,    0, 2169,

     1411,  986,  932, 1412, 1000, 1002, 1031, 1036, 1041, 1043,
     1045, 2169, 1034, 1009, 1047, 1050, 1059, 1061, 1409,    0,
     2169, 1408, 1022, 1407, 1406,    0, 2169, 1407, 1403, 1390,
        0, 2169, 1254,    0, 1243, 1250, 1249,    0, 1249, 1247,
     1243,    0, 1242, 1241, 1239, 1057, 2169, 1046, 2169, 1056,
     2169, 1082, 1238, 1236, 1237, 1037, 1093, 1235, 1190, 1094,
     2169, 2169, 1051, 1056, 1158, 1068, 1058, 1084, 1097, 1099,
     1100, 1104, 1076, 1088, 1108, 1115, 1120, 1121, 2169, 2169,
      884, 2169, 2169, 2169, 2169,  857, 2169, 2169, 2169, 2169,
     2169, 2169, 2169, 1113, 2169, 2169, 2169, 2169, 1122, 1135,

     1141, 1106,  486,  481, 1108, 1144, 1148, 1149, 1159, 1114,
     1156, 1160, 1162,    0, 1156, 1167, 1172, 1130,  336,  191,
     1183, 1185, 1186, 1164, 1188, 1191, 1194, 1204, 1163,  184,
     1198, 1206, 1163, 1209, 1212, 1219, 2169, 1220, 1178, 1222,
     1190, 1192, 1192, 1205, 2169, 1202, 1212, 2169, 2169, 1259,
     1271, 1283, 1295, 1307, 1319, 1331, 1343, 1355, 1367, 1379,
     1391, 1396, 1406, 1416, 1427, 1439, 1444, 1455, 1467, 1472,
     1483, 1488, 1499, 1510, 1521, 1533, 1538, 1543, 1554, 1562,
     1573, 1585, 1590, 1594, 1605, 1616, 1628, 1639, 1651, 1662,
     1672, 1682, 1693, 1705, 1710, 1720, 1730, 1740, 1751, 1763,

     1775, 1787, 1792, 1803, 1815, 1820, 1831, 1836, 1847, 1858,
     1868, 1879, 1891, 1903, 1908, 1910, 1915, 1926, 1937, 1948,
     1960, 1965, 1968, 1972, 1983, 1994, 2005, 2016, 2026, 2036,
     2046, 2056, 2067, 2072, 2082, 2092, 2103, 2108, 2113, 2124,
     2135, 2145, 2147, 2157
    } ;

static yyconst flex_int16_t yy_def[545] =
    {   0,
      450,  450,  449,  449,  449,    5,  450,  450,  451,  451,
      452,  452,  449,   13,  449,   15,  453,  453,  454,  454,
      449,   21,  449,   23,  455,  455,  456,  456,  449,   29,
      457,  457,  449,   33,  458,  458,  459,  459,  460,  460,
      449,   41,  449,   43,  449,   45,  449,  449,  449,  449,
      449,  449,  461,  449,  449,  462,  462,  462,  462,  462,
      463,  464,  464,  464,  464,  464,  465,  449,  449,  466,
      449,  449,  467,  467,  468,  449,  449,  449,  449,  449,
      469,  449,  449,  469,  449,  449,  449,  449,  470,  449,
      449,  471,  449,  449,  449,  449,  472,  473,  449,  474,

      449,  475,  449,  449,  476,  449,  449,  449,  449,  449,
      477,  449,  449,  449,  478,  449,  449,  449,  449,  449,
      449,  479,  449,  480,  449,  481,  449,  449,  449,  449,
      449,  449,  482,  449,  449,  449,  449,  449,  483,  483,
      483,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      484,  485,  449,  449,  486,  487,  449,  449,  488,  489,
      489,  449,  449,  489,  449,  449,  449,  490,  490,  449,
      449,  449,  449,  449,  491,  449,  449,  449,  492,  449,
      449,  493,  494,  449,  449,  495,  495,  495,  495,  495,
      496,  497,  497,  497,  497,  497,  449,  498,  499,  498,

      498,  498,  498,  500,  449,  501,  502,  449,  503,  503,
      504,  449,  449,  449,  505,  449,  449,  505,  449,  449,
      449,  449,  449,  506,  449,  507,  449,  508,  509,  510,
      449,  511,  449,  512,  513,  449,  449,  449,  514,  515,
      449,  516,  517,  449,  449,  449,  449,  449,  518,  449,
      519,  449,  520,  449,  449,  449,  449,  449,  521,  449,
      449,  449,  449,  449,  522,  523,  449,  449,  523,  524,
      525,  449,  449,  449,  449,  526,  449,  449,  449,  449,
      527,  527,  449,  449,  449,  449,  528,  529,  529,  449,
      449,  449,  530,  449,  449,  531,  532,  449,  533,  449,

      449,  449,  534,  534,  534,  534,  535,  535,  535,  535,
      535,  449,  449,  449,  536,  536,  536,  536,  449,  537,
      449,  449,  538,  449,  449,  507,  449,  449,  511,  449,
      512,  449,  449,  514,  539,  449,  449,  540,  449,  519,
      449,  520,  449,  449,  449,  449,  449,  522,  449,  449,
      449,  449,  449,  449,  528,  541,  529,  449,  531,  542,
      449,  449,  449,  534,  449,  534,  534,  535,  535,  535,
      535,  449,  449,  449,  536,  449,  536,  536,  449,  449,
      538,  449,  449,  449,  449,  539,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  541,  529,

      542,  449,  534,  449,  534,  535,  449,  535,  535,  449,
      536,  449,  536,  543,  449,  449,  529,  449,  449,  534,
      535,  449,  535,  449,  449,  536,  544,  529,  449,  449,
      449,  535,  449,  449,  449,  544,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,    0,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449
    } ;

static yyconst flex_int16_t yy_nxt[2231] =
    {   0,
       50,   50,   51,   50,   52,   53,   50,   54,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   55,
       56,   56,   57,   58,   56,   59,   56,   56,   60,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       50,   50,   50,   56,   56,   57,   58,   56,   59,   56,
       60,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       50,   50,   61,   51,   50,   52,   53,   50,   54,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       55,   62,   62,   63,   64,   62,   65,   62,   62,   66,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   50,   50,   50,   62,   62,   63,   64,   62,   65,
       62,   66,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   50,   67,   67,   68,   67,   69,   70,   67,   71,
       67,   67,   67,   67,   67,   72,   67,   67,   67,   67,
       67,   67,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   74,   73,   73,
       73,   73,   67,   67,   67,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   74,   73,
       73,   73,   67,   76,   77,  430,   78,   80,   77,   79,
       78,   82,  430,   79,   83,   84,   82,  237,  238,   85,

       48,   86,   49,   48,   48,   48,   48,   48,   87,   48,
       48,   48,   48,   48,   48,   48,   48,   88,   48,   48,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       48,   48,   48,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       48,   90,   91,   49,   90,   90,   92,   90,   90,   48,
       93,   90,   90,   94,   90,   90,   90,   90,   95,   96,
       90,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   90,   90,   90,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   90,   99,  100,  188,  101,  102,  216,  103,  104,
      100,  217,  101,  105,   99,  103,  107,  419,  107,  244,
      245,   99,  108,  109,  108,  109,  110,  188,  110,   48,
       48,   49,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,   48,
       48,   48,  111,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,   48,
       48,  112,   49,   48,   48,   48,   48,   48,  113,  113,
       48,   48,  113,   48,   48,   48,   48,  114,   48,   48,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       48,   48,   48,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       48,   48,  116,  117,  185,  119,  197,  303,  120,   48,
      121,  117,  404,  119,  248,  245,  120,  419,  123,  124,
       48,  125,  126,  199,  127,  185,  128,  124,   48,  125,

      126,  303,  127,  129,  130,  131,  129,  132,  133,  129,
      134,  135,  129,  129,  129,  129,  129,  136,  137,  137,
      129,  138,  129,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  140,  139,  139,
      141,  139,  139,  142,  129,  129,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  140,  139,
      139,  141,  139,  143,  146,  146,  147,  146,  148,  146,
      146,  146,  149,  150,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  149,  146,  150,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  149,   49,   49,  153,  153,  187,
      154,  154,   49,   49,  157,  157,  189,  158,  158,  161,
      161,  162,  162,  210,  163,  163,  190,  218,  286,  230,
      187,  219,  221,  231,  255,  256,  302,  189,  267,  222,
      287,  268,  274,  275,  155,  155,  210,  190,  223,  279,
      280,  159,  159,  332,  237,  238,  234,  302,  164,  164,
      165,  166,  167,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      168,  168,  168,  168,  168,  168,  168,  168,  169,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      165,  165,  165,  168,  168,  168,  168,  168,  168,  168,
      169,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      165,  170,  171,  172,  170,  170,  170,  170,  170,  170,
      170,  173,  170,  174,  170,  170,  170,  170,  170,  170,
      170,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  170,  170,  170,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,

      175,  170,  176,  177,  178,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  176,  176,  176,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  176,  191,  197,  197,  197,  295,  267,  291,
      242,  268,  197,  304,  286,  261,  262,  262,  263,  296,
      292,  199,  199,  199,  193,  194,  287,  195,  201,  199,
      196,  264,  264,  200,  244,  245,  304,  414,  269,  202,

      265,  449,  203,  281,  289,  305,  281,  193,  194,  306,
      195,  201,  196,  264,  200,  261,  263,  263,  263,  269,
      202,  191,  197,  203,  197,  289,  305,  197,  313,  197,
      306,  264,  264,  197,  197,  248,  245,  197,  291,  199,
      323,  199,  193,  194,  199,  195,  199,  197,  196,  292,
      199,  199,  309,  264,  199,  197,  308,  310,  216,  197,
      314,  323,  217,  311,  199,  193,  194,  364,  195,  197,
      196,  316,  199,  221,  315,  309,  199,  308,  310,  218,
      222,  314,  267,  219,  311,  268,  199,  230,  364,  223,
      317,  231,  255,  256,  316,  346,  346,  346,  315,  350,

      275,  318,  261,  262,  262,  263,  363,  261,  263,  263,
      263,  317,  352,  280,  286,  449,  286,  281,  264,  347,
      281,  286,  318,  264,  264,  291,  287,  295,  287,  295,
      363,  366,  197,  287,  367,  372,  292,  197,  286,  296,
      347,  296,  197,  374,  197,  264,  197,  381,  197,  199,
      287,  376,  366,  357,  199,  367,  368,  350,  275,  199,
      197,  199,  197,  199,  374,  199,  369,  373,  199,  404,
      381,  346,  346,  346,  357,  370,  396,  199,  371,  199,
      368,  394,  375,  352,  280,  197,  395,  402,  373,  369,
      377,  403,  405,  378,  286,  295,  370,  396,  407,  371,

      197,  197,  199,  375,  394,  372,  287,  296,  402,  197,
      374,  377,  403,  405,  378,  199,  376,  199,  199,  406,
      410,  412,  197,  286,  415,  400,  199,  416,  416,  416,
      408,  374,  409,  199,  418,  287,  286,  373,  199,  199,
      406,  410,  295,  411,  420,  197,  400,  424,  287,  407,
      422,  408,  429,  409,  296,  413,  418,  425,  373,  365,
      197,  412,  199,  197,  411,  420,  199,  199,  424,  417,
      416,  416,  416,  286,  199,  429,  413,  199,  199,  421,
      199,  416,  416,  416,  431,  287,  422,  197,  433,  425,
      417,  359,  434,  423,  439,  435,  395,  441,  426,  431,

      421,  199,  442,  199,  199,  438,  199,  440,  428,  199,
      434,  433,  437,  435,  423,  439,  199,  287,  441,  426,
      435,  438,  432,  440,  199,  442,  443,  199,  444,  428,
      437,  445,  446,  287,  447,  448,  358,  437,  355,  398,
      199,  397,  393,  432,  392,  391,  390,  443,  339,  444,
      339,  445,  388,  387,  446,  447,  242,  385,  448,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  182,  182,  384,  182,  182,  182,  182,  182,  182,

      182,  182,  182,  186,  328,  186,  186,  192,  328,  383,
      382,  380,  379,  365,  362,  192,  192,  198,  361,  359,
      294,  358,  290,  198,  198,  198,  198,  204,  204,  355,
      285,  354,  204,  353,  204,  204,  282,  351,  204,  206,
      206,  349,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  209,  345,  209,  209,  211,  344,  257,  343,  211,
      211,  211,  211,  211,  211,  211,  211,  215,  215,  341,
      215,  339,  215,  215,  215,  215,  215,  215,  215,  224,
      338,  224,  224,  226,  226,  337,  226,  336,  226,  226,
      226,  226,  226,  226,  226,  228,  242,  228,  228,  229,

      241,  333,  330,  328,  229,  327,  229,  229,  229,  229,
      229,  232,  227,  225,  232,  220,  220,  214,  325,  232,
      232,  234,  234,  324,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  239,  239,  322,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  240,  319,  240,  240,  243,
      243,  301,  243,  243,  249,  298,  180,  294,  290,  249,
      249,  249,  249,  249,  249,  249,  251,  285,  284,  283,
      282,  251,  251,  253,  253,  282,  253,  277,  253,  253,
      253,  253,  253,  253,  253,  259,  259,  272,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  266,  260,  266,

      266,  270,  258,  270,  270,  271,  271,  257,  254,  271,
      271,  271,  271,  271,  271,  271,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  276,  276,
      252,  250,  276,  276,  276,  276,  276,  276,  276,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  281,  281,  281,  247,  281,  281,  281,  281,  281,
      281,  281,  281,  288,  246,  242,  241,  235,  288,  288,
      236,  288,  288,  293,  235,  233,  227,  293,  225,  293,
      220,  293,  293,  297,  214,  213,  212,  208,  297,  297,
      207,  297,  297,  299,  299,  205,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  300,  300,  300,  300,  184,
      300,  300,  300,  300,  300,  300,  300,  186,  183,  186,
      186,  192,  181,  180,  449,  145,  145,   49,   49,  192,
      192,  307,   49,   49,  449,  449,  449,  307,  307,  307,
      307,  198,  449,  449,  449,  449,  449,  198,  198,  198,
      198,  312,  312,  312,  312,  312,  312,  312,  312,  449,
      312,  312,  312,  204,  204,  449,  449,  449,  204,  449,
      204,  204,  449,  449,  204,  320,  320,  449,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  321,  321,  321,
      321,  449,  321,  321,  321,  321,  321,  321,  321,  209,

      449,  209,  209,  211,  449,  449,  449,  211,  211,  211,
      211,  211,  211,  211,  211,  215,  215,  449,  215,  449,
      215,  215,  215,  215,  215,  215,  215,  224,  449,  224,
      224,  326,  326,  449,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  228,  449,  228,  228,  229,  449,  449,
      449,  449,  229,  449,  229,  229,  229,  229,  229,  232,
      449,  449,  232,  449,  449,  449,  449,  232,  232,  329,
      449,  449,  449,  449,  449,  329,  449,  329,  329,  234,
      234,  449,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  331,  331,  331,  331,  331,  331,  331,  331,  331,

      331,  331,  331,  334,  334,  449,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  240,  449,  240,  240,  335,
      335,  243,  243,  449,  243,  243,  249,  449,  449,  449,
      449,  249,  249,  249,  249,  249,  249,  249,  340,  449,
      449,  449,  449,  449,  340,  449,  340,  340,  342,  342,
      449,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      259,  259,  449,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  348,  449,  348,  266,  449,  266,  266,  270,
      449,  270,  270,  271,  271,  449,  449,  271,  271,  271,
      271,  271,  271,  271,  276,  276,  449,  449,  276,  276,

      276,  276,  276,  276,  276,  281,  281,  281,  449,  281,
      281,  281,  281,  281,  281,  281,  281,  356,  449,  449,
      449,  449,  449,  449,  449,  356,  356,  288,  449,  449,
      449,  449,  288,  288,  449,  288,  288,  293,  449,  449,
      449,  293,  449,  293,  449,  293,  293,  360,  449,  449,
      449,  449,  449,  449,  449,  360,  360,  297,  449,  449,
      449,  449,  297,  297,  449,  297,  297,  299,  299,  449,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  186,
      449,  186,  186,  307,  449,  449,  449,  449,  449,  307,
      307,  307,  307,  198,  449,  449,  449,  449,  449,  198,

      198,  198,  198,  320,  320,  449,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  209,  449,  209,  209,  386,
      386,  449,  386,  386,  389,  389,  389,  389,  449,  389,
      389,  389,  389,  389,  389,  389,  399,  449,  449,  449,
      449,  399,  399,  449,  399,  399,  401,  449,  449,  449,
      449,  401,  401,  449,  401,  401,  427,  427,  436,  449,
      449,  449,  449,  449,  436,  436,  436,  436,   47,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449
    } ;

static yyconst flex_int16_t yy_chk[2231] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    9,    9,  430,    9,   10,   10,    9,
       10,   11,  420,   10,   11,   12,   12,  104,  104,   12,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   17,   17,   58,   17,   17,   82,   17,   18,
       18,   82,   18,   18,   17,   18,   19,  419,   20,  116,
      116,   18,   19,   19,   20,   20,   19,   58,   20,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   25,   25,   25,   55,   25,   62,  187,   25,   26,
       26,   26,  404,   26,  121,  121,   26,  403,   27,   27,
       25,   27,   27,   62,   27,   55,   28,   28,   26,   28,

       28,  187,   28,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   35,   36,   35,   36,   57,
       35,   36,   37,   38,   37,   38,   59,   37,   38,   39,
       40,   39,   40,   74,   39,   40,   60,   84,  168,  100,
       57,   84,   86,  100,  128,  128,  185,   59,  140,   86,
      168,  140,  155,  155,   35,   36,   74,   60,   86,  159,
      159,   37,   38,  235,  237,  237,  235,  185,   39,   40,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   61,   63,   64,   65,  179,  141,  175,
      386,  141,   66,  188,  169,  136,  136,  136,  136,  179,
      175,   63,   64,   65,   61,   61,  169,   61,   64,   66,
       61,  136,  136,   63,  244,  244,  188,  381,  141,   65,

      136,  164,   66,  164,  169,  189,  164,   61,   61,  190,
       61,   64,   61,  136,   63,  137,  137,  137,  137,  141,
       65,  191,  192,   66,  195,  169,  189,  193,  199,  194,
      190,  137,  137,  196,  197,  248,  248,  198,  291,  192,
      210,  195,  191,  191,  193,  191,  194,  201,  191,  291,
      196,  197,  194,  137,  198,  200,  193,  195,  216,  202,
      199,  210,  216,  196,  201,  191,  191,  303,  191,  203,
      191,  201,  200,  221,  200,  194,  202,  193,  195,  218,
      221,  199,  269,  218,  196,  269,  203,  230,  303,  221,
      202,  230,  255,  255,  201,  261,  261,  261,  200,  274,

      274,  203,  262,  262,  262,  262,  302,  263,  263,  263,
      263,  202,  279,  279,  286,  282,  288,  282,  262,  262,
      282,  289,  203,  263,  263,  293,  286,  295,  288,  297,
      302,  305,  307,  289,  306,  313,  293,  308,  356,  295,
      262,  297,  309,  314,  310,  263,  311,  323,  315,  307,
      356,  316,  305,  289,  308,  306,  308,  350,  350,  309,
      317,  310,  318,  311,  314,  315,  309,  313,  316,  366,
      323,  346,  346,  346,  289,  310,  348,  317,  311,  318,
      308,  346,  315,  352,  352,  368,  346,  363,  313,  309,
      317,  364,  367,  318,  357,  360,  310,  348,  369,  311,

      370,  371,  368,  315,  346,  372,  357,  360,  363,  375,
      373,  317,  364,  367,  318,  369,  376,  370,  371,  368,
      374,  377,  378,  399,  394,  357,  375,  394,  394,  394,
      370,  373,  371,  376,  402,  399,  400,  372,  377,  378,
      368,  374,  401,  375,  405,  406,  357,  410,  400,  407,
      408,  370,  418,  371,  401,  378,  402,  411,  372,  365,
      409,  412,  406,  413,  375,  405,  407,  408,  410,  400,
      415,  415,  415,  417,  411,  418,  378,  409,  412,  406,
      413,  416,  416,  416,  421,  417,  422,  423,  424,  425,
      400,  359,  426,  409,  429,  427,  416,  433,  413,  431,

      406,  421,  439,  422,  423,  428,  425,  432,  417,  426,
      434,  424,  427,  435,  409,  429,  431,  428,  433,  413,
      436,  438,  423,  440,  432,  439,  441,  434,  442,  417,
      435,  443,  444,  438,  446,  447,  358,  436,  355,  354,
      440,  353,  345,  423,  344,  343,  341,  441,  340,  442,
      339,  443,  337,  336,  444,  446,  335,  333,  447,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  453,  453,  453,  453,  453,

      453,  453,  453,  453,  453,  453,  453,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  461,  461,  330,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  462,  329,  462,  462,  463,  328,  325,
      324,  322,  319,  304,  301,  463,  463,  464,  298,  296,
      294,  292,  290,  464,  464,  464,  464,  465,  465,  287,
      285,  284,  465,  283,  465,  465,  281,  277,  465,  466,
      466,  272,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  467,  260,  467,  467,  468,  258,  257,  254,  468,
      468,  468,  468,  468,  468,  468,  468,  469,  469,  252,
      469,  251,  469,  469,  469,  469,  469,  469,  469,  470,
      250,  470,  470,  471,  471,  247,  471,  246,  471,  471,
      471,  471,  471,  471,  471,  472,  243,  472,  472,  473,

      241,  236,  233,  232,  473,  231,  473,  473,  473,  473,
      473,  474,  227,  225,  474,  220,  219,  214,  213,  474,
      474,  475,  475,  212,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  476,  476,  208,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  477,  205,  477,  477,  478,
      478,  184,  478,  478,  479,  181,  180,  177,  171,  479,
      479,  479,  479,  479,  479,  479,  480,  166,  163,  162,
      161,  480,  480,  481,  481,  160,  481,  158,  481,  481,
      481,  481,  481,  481,  481,  482,  482,  153,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  483,  134,  483,

      483,  484,  132,  484,  484,  485,  485,  130,  127,  485,
      485,  485,  485,  485,  485,  485,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  487,  487,
      125,  124,  487,  487,  487,  487,  487,  487,  487,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  489,  489,  489,  120,  489,  489,  489,  489,  489,
      489,  489,  489,  490,  119,  115,  112,  105,  490,  490,
      103,  490,  490,  491,  102,  101,   95,  491,   91,  491,
       85,  491,  491,  492,   80,   79,   78,   71,  492,  492,
       70,  492,  492,  493,  493,   69,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  494,  494,  494,  494,   54,
      494,  494,  494,  494,  494,  494,  494,  495,   53,  495,
      495,  496,   52,   51,   47,   32,   31,    8,    7,  496,
      496,  497,    2,    1,    0,    0,    0,  497,  497,  497,
      497,  498,    0,    0,    0,    0,    0,  498,  498,  498,
      498,  499,  499,  499,  499,  499,  499,  499,  499,    0,
      499,  499,  499,  500,  500,    0,    0,    0,  500,    0,
      500,  500,    0,    0,  500,  501,  501,    0,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  502,  502,  502,
      502,    0,  502,  502,  502,  502,  502,  502,  502,  503,

        0,  503,  503,  504,    0,    0,    0,  504,  504,  504,
      504,  504,  504,  504,  504,  505,  505,    0,  505,    0,
      505,  505,  505,  505,  505,  505,  505,  506,    0,  506,
      506,  507,  507,    0,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  508,    0,  508,  508,  509,    0,    0,
        0,    0,  509,    0,  509,  509,  509,  509,  509,  510,
        0,    0,  510,    0,    0,    0,    0,  510,  510,  511,
        0,    0,    0,    0,    0,  511,    0,  511,  511,  512,
      512,    0,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  513,  513,  513,  513,  513,  513,  513,  513,  513,

      513,  513,  513,  514,  514,    0,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  515,    0,  515,  515,  516,
      516,  517,  517,    0,  517,  517,  518,    0,    0,    0,
        0,  518,  518,  518,  518,  518,  518,  518,  519,    0,
        0,    0,    0,    0,  519,    0,  519,  519,  520,  520,
        0,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      521,  521,    0,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  522,    0,  522,  523,    0,  523,  523,  524,
        0,  524,  524,  525,  525,    0,    0,  525,  525,  525,
      525,  525,  525,  525,  526,  526,    0,    0,  526,  526,

      526,  526,  526,  526,  526,  527,  527,  527,    0,  527,
      527,  527,  527,  527,  527,  527,  527,  528,    0,    0,
        0,    0,    0,    0,    0,  528,  528,  529,    0,    0,
        0,    0,  529,  529,    0,  529,  529,  530,    0,    0,
        0,  530,    0,  530,    0,  530,  530,  531,    0,    0,
        0,    0,    0,    0,    0,  531,  531,  532,    0,    0,
        0,    0,  532,  532,    0,  532,  532,  533,  533,    0,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  534,
        0,  534,  534,  535,    0,    0,    0,    0,    0,  535,
      535,  535,  535,  536,    0,    0,    0,    0,    0,  536,

      536,  536,  536,  537,  537,    0,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  538,    0,  538,  538,  539,
      539,    0,  539,  539,  540,  540,  540,  540,    0,  540,
      540,  540,  540,  540,  540,  540,  541,    0,    0,    0,
        0,  541,  541,    0,  541,  541,  542,    0,    0,    0,
        0,  542,  542,    0,  542,  542,  543,  543,  544,    0,
        0,    0,    0,    0,  544,  544,  544,  544,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449
    } ;

extern int pyscanYY_flex_debug;
int pyscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pyscanYYtext;
#line 1 "pyscanner.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2013 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*  This code is based on the work done by the MoxyPyDoxy team
 *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
 *  in Spring 2005 as part of CS 179E: Compiler Design Project
 *  at the University of California, Riverside; the course was
 *  taught by Peter H. Froehlich <phf@acm.org>.
 */
#line 26 "pyscanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
#include <qfileinfo.h>
  
#include "pyscanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "pycode.h"
#include "arguments.h"

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#define YY_NEVER_INTERACTIVE 1
#define YY_NO_INPUT 1

/* -----------------------------------------------------------------
 *
 *	statics
 */

  
static ParserInterface *g_thisParser;
static const char *     inputString;
static int		inputPosition;
static QFile            inputFile;

static Protection	protection;

static Entry*		current_root = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static Entry*		bodyEntry    = 0 ;
static int		yyLineNr     = 1 ;
static QCString		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static Specifier 	virt;

static int              docBlockContext;
static QCString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockJavaStyle;
static bool             docBrief;
static bool             docBlockSpecial;

static bool             g_doubleQuote;
static bool             g_specialBlock;
static int              g_stringContext;
static QGString *       g_copyString;
static int              g_indent = 0;
static int              g_curIndent = 0;

static QDict<QCString>  g_packageNameCache(257);
static QCString         g_packageScope;

static char             g_atomStart;
static char             g_atomEnd;
static int              g_atomCount;

//static bool             g_insideConstructor;

static QCString         g_moduleScope;
static QCString         g_packageName;

//static bool             g_hideClassDocs;

static QCString         g_defVal;
static int              g_braceCount;

static bool             g_lexInit = FALSE;
static bool             g_packageCommentAllowed;

//-----------------------------------------------------------------------------


static void initParser()
{
  protection = Public;
  mtype = Method;
  gstat = FALSE;
  virt = Normal;
  previous = 0;
  g_packageCommentAllowed = TRUE;
  g_packageNameCache.setAutoDelete(TRUE);
}

static void initEntry()
{
  //current->python = TRUE;
  current->protection = protection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  current->lang       = SrcLangExt_Python; 
  current->setParent(current_root);
  initGroupInfo(current);
  gstat = FALSE;
}

static void newEntry()
{
  previous = current;
  current_root->addSubEntry(current);
  current = new Entry ;
  initEntry();
}

static void newVariable()
{
  if (!current->name.isEmpty() && current->name.at(0)=='_') // mark as private
  {
    current->protection=Private;
  }
  if (current_root->section&Entry::COMPOUND_MASK) // mark as class variable
  {
    current->stat = TRUE;
  }
  newEntry();
}

static void newFunction()
{
  if (current->name.left(2)=="__" && current->name.right(2)=="__")
  {
    // special method name, see
    // http://docs.python.org/ref/specialnames.html
    current->protection=Public;
  }
  else if (current->name.at(0)=='_')
  {
    current->protection=Private;
  }
}

static inline int computeIndent(const char *s)
{
  int col=0;
  static int tabSize=Config_getInt("TAB_SIZE");
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize);
    else break;
  }
  return col;
}

static QCString findPackageScopeFromPath(const QCString &path)
{
  QCString *pScope = g_packageNameCache.find(path);
  if (pScope)
  {
    return *pScope;
  }
  QFileInfo pf(path+"/__init__.py"); // found package initialization file
  if (pf.exists())
  {
    int i=path.findRev('/');
    if (i!=-1)
    {
      QCString scope = findPackageScopeFromPath(path.left(i));
      if (!scope.isEmpty())
      {
	scope+="::";
      }
      scope+=path.mid(i+1);
      g_packageNameCache.insert(path,new QCString(scope));
      return scope;
    }
  }
  return "";
}
  
static QCString findPackageScope(const char *fileName)
{
  if (fileName==0) return "";
  QFileInfo fi(fileName);
  return findPackageScopeFromPath(fi.dirPath(TRUE).data());
}

//-----------------------------------------------------------------------------

static void lineCount()
{
  DBG_CTX((stderr,"yyLineNr=%d\n",yyLineNr));
  for (const char *p = pyscanYYtext; *p; ++p)
  {
    yyLineNr += (*p == '\n') ;
  }
}

static void incLineNr()
{
  DBG_CTX((stderr,"yyLineNr=%d\n",yyLineNr));
  yyLineNr++;
}

#if 0
// Appends the current-name to current-type;
// Destroys current-name.
// Destroys current->args and current->argList
static void addType( Entry* current )
{
    uint tl=current->type.length();
    if ( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->name ;
    current->name.resize(0) ;
    tl=current->type.length();
    if ( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->args ;
    current->args.resize(0) ;
    current->argList->clear();
}

static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}
#endif
//-----------------------------------------------------------------

//-----------------------------------------------------------------
static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}

/*
static void appendDocBlock() {
  previous = current;
  current_root->addSubEntry(current);
  current = new Entry;
  initEntry();
}
*/

static void handleCommentBlock(const QCString &doc,bool brief)
{
  //printf("handleCommentBlock(doc=[%s] brief=%d docBlockInBody=%d docBlockJavaStyle=%d\n",
  //    doc.data(),brief,docBlockInBody,docBlockJavaStyle);

  // TODO: Fix me
  docBlockInBody=FALSE;
  
  if (docBlockInBody && previous && !previous->doc.isEmpty())
  {
    previous->doc=previous->doc.stripWhiteSpace()+"\n\n";
  }

  int position = 0;
  bool needsEntry;
  int lineNr = brief ? current->briefLine : current->docLine;
  while (parseCommentBlock(
	g_thisParser,
	(docBlockInBody && previous) ? previous : current,
	doc,     // text
	yyFileName, // file
	lineNr,
	docBlockInBody ? FALSE : brief, 
    docBlockJavaStyle, // javadoc style // or FALSE,
	docBlockInBody,
	protection,
        position,
        needsEntry)
     ) // need to start a new entry
  {
    if (needsEntry)
    {
      newEntry();
    }
  }
  if (needsEntry)
  {
    newEntry();
  }

}

static void endOfDef(int correction=0)
{
  //printf("endOfDef at=%d\n",yyLineNr);
  if (bodyEntry)
  {
    bodyEntry->endBodyLine  = yyLineNr-correction;
    bodyEntry = 0;
  }
  newEntry();
  //g_insideConstructor = FALSE;
}

static inline void addToString(const char *s)
{
  if (g_copyString) (*g_copyString)+=s;
}

static void initTriDoubleQuoteBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBlockSpecial   = pyscanYYtext[3]=='!';
  docBlock.resize(0);
  g_doubleQuote = TRUE;
  startCommentBlock(FALSE);
}

static void initTriSingleQuoteBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBlockSpecial   = pyscanYYtext[3]=='!';
  docBlock.resize(0);
  g_doubleQuote = FALSE;
  startCommentBlock(FALSE);
}

static void initSpecialBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBrief = TRUE;
  docBlock.resize(0);
  startCommentBlock(TRUE);
}

static void searchFoundDef()
{
  current->fileName  = yyFileName;
  current->startLine = yyLineNr;
  current->bodyLine  = yyLineNr;
  current->section = Entry::FUNCTION_SEC;
  current->protection = protection = Public;
  current->lang = SrcLangExt_Python;
  current->virt = Normal;
  current->stat = gstat;
  current->mtype = mtype = Method;
  current->type.resize(0);
  current->name.resize(0);
  current->args.resize(0);
  current->argList->clear();
  g_packageCommentAllowed = FALSE;
  gstat=FALSE;
  //printf("searchFoundDef at=%d\n",yyLineNr);
}

static void searchFoundClass()
{
  current->section = Entry::CLASS_SEC;
  current->argList->clear();
  current->type += "class" ;
  current->fileName  = yyFileName;
  current->startLine  = yyLineNr;
  current->bodyLine  = yyLineNr;
  g_packageCommentAllowed = FALSE;
}

//-----------------------------------------------------------------------------
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int c=0;
  while ( c < max_size && inputString[inputPosition] )
  {
    *buf = inputString[inputPosition++] ;
    //printf("%d (%c)\n",*buf,*buf);
    c++; buf++;
  }
  return c;
}

/* start command character */
/* Main start state */


/* Mid-comment states */
/* %x FuncDoubleComment */
/* %x ClassDoubleComment */



/* Function states */




/* Class states */




/* Variable states */



/* String states */



/* import */



#line 1713 "<stdout>"

#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define TryClassDocString 3
#define TripleComment 4
#define SpecialComment 5
#define FunctionDec 6
#define FunctionParams 7
#define FunctionBody 8
#define FunctionParamDefVal 9
#define ClassDec 10
#define ClassInheritance 11
#define ClassCaptureIndent 12
#define ClassBody 13
#define VariableDec 14
#define VariableEnd 15
#define VariableAtom 16
#define SingleQuoteString 17
#define DoubleQuoteString 18
#define TripleString 19
#define FromMod 20
#define FromModItem 21
#define Import 22

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pyscanYYlex_destroy (void );

int pyscanYYget_debug (void );

void pyscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE pyscanYYget_extra (void );

void pyscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pyscanYYget_in (void );

void pyscanYYset_in  (FILE * in_str  );

FILE *pyscanYYget_out (void );

void pyscanYYset_out  (FILE * out_str  );

int pyscanYYget_leng (void );

char *pyscanYYget_text (void );

int pyscanYYget_lineno (void );

void pyscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pyscanYYwrap (void );
#else
extern int pyscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( pyscanYYtext, pyscanYYleng, 1, pyscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pyscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pyscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pyscanYYin))==0 && ferror(pyscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pyscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pyscanYYlex (void);

#define YY_DECL int pyscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pyscanYYtext and pyscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( pyscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(pyscanYYtext[pyscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 537 "pyscanner.l"


  /* ------------ Function recognition rules -------------- */

#line 1930 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)pyscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in pyscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pyscanYYin )
			pyscanYYin = stdin;

		if ( ! pyscanYYout )
			pyscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pyscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE );
		}

		pyscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pyscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 450 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2169 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
#line 543 "pyscanner.l"
{ // start of a function/method definition with indent
      			  DBG_CTX((stderr,"Found def at %d\n",yyLineNr));
      			  g_indent=computeIndent(pyscanYYtext);
			  searchFoundDef();
			  BEGIN( FunctionDec );
      			}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 549 "pyscanner.l"
{ // start of a function/method definition
			  searchFoundDef();
			  BEGIN( FunctionDec );
                        }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 554 "pyscanner.l"
{ // start of a class definition with indent
       			  DBG_CTX((stderr,"Found class at %d\n",yyLineNr));
      			  g_indent=computeIndent(pyscanYYtext);
			  searchFoundClass();
			  BEGIN( ClassDec ) ;
       			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 560 "pyscanner.l"
{  // start of a class definition
			  searchFoundClass();
			  BEGIN( ClassDec ) ;
                       }
	YY_BREAK
case 5:
#line 565 "pyscanner.l"
case 6:
YY_RULE_SETUP
#line 565 "pyscanner.l"
{ // start of an from import
			  g_packageCommentAllowed = FALSE;
                          BEGIN( FromMod );
                       }
	YY_BREAK
case 7:
#line 571 "pyscanner.l"
case 8:
YY_RULE_SETUP
#line 571 "pyscanner.l"
{ // start of an import statement
			  g_packageCommentAllowed = FALSE;
                          BEGIN( Import );
                       }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 575 "pyscanner.l"
{ // property
      			current->section   = Entry::VARIABLE_SEC;
  			current->mtype     = Property;
			current->name      = QCString(pyscanYYtext).stripWhiteSpace();
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			g_packageCommentAllowed = FALSE;
			BEGIN(VariableDec);
       	              }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 585 "pyscanner.l"
{ // variable
      			g_indent=computeIndent(pyscanYYtext);
      			current->section   = Entry::VARIABLE_SEC;
			current->name      = QCString(pyscanYYtext).stripWhiteSpace();
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			g_packageCommentAllowed = FALSE;
			BEGIN(VariableDec);
      		      }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 595 "pyscanner.l"
{ // start of a single quoted string
       		        g_stringContext=YY_START;
		        g_copyString=0;
			g_packageCommentAllowed = FALSE;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 601 "pyscanner.l"
{ // start of a double quoted string
       	                g_stringContext=YY_START;
			g_copyString=0;
			g_packageCommentAllowed = FALSE;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 607 "pyscanner.l"
{
       			gstat=TRUE;
      		      }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 610 "pyscanner.l"
{ // normal comment 
			g_packageCommentAllowed = FALSE;
      		      }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 613 "pyscanner.l"
{ // some other identifier
			g_packageCommentAllowed = FALSE;
		      }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 616 "pyscanner.l"
{
      			g_curIndent=computeIndent(pyscanYYtext);
                      }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 620 "pyscanner.l"
{ // new line
                        lineCount();
                      }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 624 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 629 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 20:
/* rule 20 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 634 "pyscanner.l"
{  // start of a special comment
      			g_curIndent=computeIndent(pyscanYYtext);
			g_packageCommentAllowed = FALSE;
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 640 "pyscanner.l"
{ // any other character...
                        // This is the major default
                        // that should catch everything
                        // else in Body.
                      }
	YY_BREAK


case 22:
YY_RULE_SETUP
#line 648 "pyscanner.l"
{ // from package import 
                        g_packageName=pyscanYYtext;
		      }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 651 "pyscanner.l"
{
    			BEGIN(FromModItem);
    		      }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 654 "pyscanner.l"
{
                        incLineNr();
                        BEGIN(Search);
                      }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 658 "pyscanner.l"
{
		      }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 660 "pyscanner.l"
{
                        unput(*pyscanYYtext);
                        BEGIN(Search);
                      }
	YY_BREAK


case 27:
YY_RULE_SETUP
#line 667 "pyscanner.l"
{ // import all
                  QCString item=g_packageName;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using directive: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDIR_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
                  BEGIN(Search);
    		}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 678 "pyscanner.l"
{
                  QCString item=g_packageName+"."+pyscanYYtext;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDECL_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
		}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 688 "pyscanner.l"
{
                  QCString item=g_packageName+"."+pyscanYYtext;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDECL_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
                  BEGIN(Search);
		}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 699 "pyscanner.l"
{
                  incLineNr();
                  BEGIN(Search);
                }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 703 "pyscanner.l"
{
		}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 705 "pyscanner.l"
{ 
  		}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 707 "pyscanner.l"
{
                  unput(*pyscanYYtext);
                  BEGIN(Search);
                }
	YY_BREAK


case 34:
YY_RULE_SETUP
#line 714 "pyscanner.l"
{
			current->name=removeRedundantWhiteSpace(substitute(pyscanYYtext,".","::"));
			current->fileName = yyFileName; 
			//printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
			current->section=Entry::USINGDECL_SEC;
			current_root->addSubEntry(current);
			current = new Entry ;
			initEntry();
			BEGIN(Search);
                      }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 724 "pyscanner.l"
{
                  incLineNr();
                  BEGIN(Search);
                }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 728 "pyscanner.l"
{
		}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 730 "pyscanner.l"
{
                  unput(*pyscanYYtext);
                  BEGIN(Search);
                }
	YY_BREAK


case 38:
YY_RULE_SETUP
#line 737 "pyscanner.l"
{
                        DBG_CTX((stderr,"Found member variable %s in %s at %d\n",&pyscanYYtext[5],current_root->name.data(),yyLineNr));
			current->name=&pyscanYYtext[5];
			current->section=Entry::VARIABLE_SEC;
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			current->type.resize(0);
			if (current->name.at(0)=='_') // mark as private
			{
			  current->protection=Private;
			}
			else
			{
			  current->protection=Public;
			}
			newEntry();
                      }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 755 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 760 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 41:
/* rule 41 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 765 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 769 "pyscanner.l"
{ // #
	              }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 771 "pyscanner.l"
{ // start of a single quoted string
       			g_stringContext=YY_START;
			g_copyString=0;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 776 "pyscanner.l"
{ // start of a double quoted string
       			g_stringContext=YY_START;
			g_copyString=0;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 781 "pyscanner.l"
{ incLineNr(); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 782 "pyscanner.l"
// identifiers
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 783 "pyscanner.l"
// other uninteresting stuff
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 784 "pyscanner.l"
// anything else
	YY_BREAK


case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 788 "pyscanner.l"
{
                        DBG_CTX((stderr,"indent %d<=%d\n",computeIndent(&pyscanYYtext[1]),g_indent));
                        if (computeIndent(&pyscanYYtext[1])<=g_indent) 
			{
			  int i;
			  for (i=(int)pyscanYYleng-1;i>=0;i--)
			  {
			    unput(pyscanYYtext[i]);
			  }
			  endOfDef();
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
                          incLineNr();
      		          current->program+=pyscanYYtext;
			}
                      }
	YY_BREAK
case 50:
/* rule 50 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 807 "pyscanner.l"
{
                        if (computeIndent(&pyscanYYtext[1])<=g_indent)
			{
			  int i;
			  for (i=(int)pyscanYYleng-1;i>=0;i--)
			  {
			    unput(pyscanYYtext[i]);
			  }
			  endOfDef();
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
			  incLineNr();
      		          current->program+=pyscanYYtext;
			}
      		      }
	YY_BREAK
case YY_STATE_EOF(FunctionBody):
#line 825 "pyscanner.l"
{
			endOfDef();
			yyterminate();
      		      }
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 829 "pyscanner.l"
{ // skip empty line
      		        current->program+=pyscanYYtext;
      	              }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 832 "pyscanner.l"
{ // something at indent >0
      		        current->program+=pyscanYYtext;
			g_curIndent = computeIndent(pyscanYYtext);
                        if (g_curIndent<=g_indent) 
			  // jumped out of the function
			{
			  endOfDef(1);
                          BEGIN(Search);
			}
      		      }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 842 "pyscanner.l"
{ // start of a single quoted string
      		        current->program+=pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 849 "pyscanner.l"
{ // start of a double quoted string
      		        current->program+=pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 856 "pyscanner.l"
{ // non-special stuff
      		        current->program+=pyscanYYtext;
		        g_specialBlock = FALSE; 
                      }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 860 "pyscanner.l"
{ // normal comment 
      		        current->program+=pyscanYYtext;
      		      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 863 "pyscanner.l"
{ // comment half way
      		        current->program+=pyscanYYtext;
                      }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 866 "pyscanner.l"
{ 
			incLineNr(); 
      		        current->program+=pyscanYYtext;
		      }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 870 "pyscanner.l"
{ // any character
      		        current->program+=*pyscanYYtext;
		        g_specialBlock = FALSE; 
                      }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 875 "pyscanner.l"
{ // start of a comment block
			current->program+=pyscanYYtext;
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 881 "pyscanner.l"
{ // start of a comment block
			current->program+=pyscanYYtext;
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 62:
/* rule 62 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 887 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK


case 63:
YY_RULE_SETUP
#line 896 "pyscanner.l"
{
			      //found function name
			      if (current->type.isEmpty()) 
			      {
				  current->type = "def";
			      }
			      current->name = pyscanYYtext;
			      current->name = current->name.stripWhiteSpace();
			      newFunction();
                            }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 906 "pyscanner.l"
{ // function without arguments
			      g_specialBlock = TRUE; // expecting a docstring
			      bodyEntry = current;
                              current->bodyLine  = yyLineNr;
                              BEGIN( FunctionBody );
			    }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 913 "pyscanner.l"
{
			       BEGIN( FunctionParams );
		            }
	YY_BREAK


case 66:
YY_RULE_SETUP
#line 919 "pyscanner.l"
{
                        }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 922 "pyscanner.l"
{ // Name of parameter
			  lineCount();
			  Argument *a = new Argument;
			  current->argList->append(a);
			  current->argList->getLast()->name = QCString(pyscanYYtext).stripWhiteSpace();
			  current->argList->getLast()->type = "";
                        }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 929 "pyscanner.l"
{ // default value
                          // TODO: this rule is too simple, need to be able to
                          // match things like =")" as well!
      			  QCString defVal=&pyscanYYtext[1];
			  g_defVal.resize(0);
			  g_braceCount=0;
			  BEGIN(FunctionParamDefVal);
      			}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 938 "pyscanner.l"
{ // end of parameter list
                        }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 941 "pyscanner.l"
{
			  g_specialBlock = TRUE; // expecting a docstring
			  bodyEntry = current;
                          current->bodyLine  = yyLineNr;
                          BEGIN( FunctionBody );
                        }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 947 "pyscanner.l"
{ // a comment
			}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 949 "pyscanner.l"
{ // Default rule inside arguments.
                        }
	YY_BREAK


case 73:
YY_RULE_SETUP
#line 955 "pyscanner.l"
{ // internal opening brace
       			  g_braceCount++;
			  g_defVal+=*pyscanYYtext;
       			}
	YY_BREAK
case 74:
#line 960 "pyscanner.l"
case 75:
YY_RULE_SETUP
#line 960 "pyscanner.l"
{
       			  if (g_braceCount==0)  // end of default argument
			  {
			    if (current->argList->getLast())
			    {
			      current->argList->getLast()->defval=g_defVal.stripWhiteSpace();
			    }
       			    BEGIN(FunctionParams);
			  }
			  else // continue
			  {
			    g_braceCount--;
			    g_defVal+=*pyscanYYtext;
			  }
       			}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 975 "pyscanner.l"
{
			    g_defVal+=*pyscanYYtext;
       			}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 978 "pyscanner.l"
{
       			    g_defVal+=*pyscanYYtext;
			    incLineNr();
       			}
	YY_BREAK


case 78:
/* rule 78 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 986 "pyscanner.l"
{ // new def at indent 0
                        incLineNr();
			endOfDef();
			//g_hideClassDocs = FALSE;
			//YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 79:
/* rule 79 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 993 "pyscanner.l"
{  // start of a special comment at indent 0
                        incLineNr();
			endOfDef();
			//g_hideClassDocs = FALSE;
			//YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 80:
/* rule 80 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 1000 "pyscanner.l"
{ // skip empty line
      		        current->program+=pyscanYYtext;
      	              }
	YY_BREAK
case YY_STATE_EOF(ClassBody):
#line 1003 "pyscanner.l"
{
			endOfDef();
			yyterminate();
      		      }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1007 "pyscanner.l"
{ // something at indent >0
                        g_curIndent=computeIndent(pyscanYYtext);
			DBG_CTX((stderr,"g_curIndent=%d g_indent=%d\n",g_curIndent,g_indent));
                        if (g_curIndent<=g_indent) 
			  // jumped out of the class/method
			{
			  endOfDef(1);
			  g_indent=g_curIndent;
			  // make sure the next rule matches ^...
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
			  //g_hideClassDocs = FALSE;
                          BEGIN(Search);
			}
			else
			{
      		          current->program+=pyscanYYtext;
			}
      		      }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1025 "pyscanner.l"
{ // start of a single quoted string
      		        current->program+=*pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1032 "pyscanner.l"
{ // start of a double quoted string
      		        current->program+=*pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1039 "pyscanner.l"
{ // non-special stuff
      		        current->program+=pyscanYYtext;
		        g_specialBlock = FALSE; 
			//g_hideClassDocs = FALSE;
                      }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1044 "pyscanner.l"
{ 
      		        current->program+=*pyscanYYtext;
			incLineNr(); 
		      }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1048 "pyscanner.l"
{ // normal comment
      		        current->program+=pyscanYYtext;
                      }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1051 "pyscanner.l"
{ // any character
		        g_specialBlock = FALSE; 
      		        current->program+=*pyscanYYtext;
                      }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1055 "pyscanner.l"
{ // start of a comment block
      		        //if (!g_hideClassDocs) 
			current->program+=pyscanYYtext;
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1062 "pyscanner.l"
{ // start of a comment block
      		        //if (!g_hideClassDocs) 
			current->program+=pyscanYYtext;
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK

case 90:
YY_RULE_SETUP
#line 1070 "pyscanner.l"
{
			  if (current->type.isEmpty()) 
			  {
			      current->type = "class";
			  }

			  current->section = Entry::CLASS_SEC;
			  current->name = pyscanYYtext;

			  // prepend scope in case of nested classes
			  if (current_root->section&Entry::SCOPE_MASK)
			  {
			    //printf("*** Prepending scope %s to class %s\n",current_root->name.data(),current->name.data());
			    current->name.prepend(current_root->name+"::");
			  }
			  
			  current->name = current->name.stripWhiteSpace();
			  current->fileName = yyFileName;        
			  docBlockContext   = YY_START;
			  docBlockInBody    = FALSE;
			  docBlockJavaStyle = FALSE;
			  docBlock.resize(0);

			  BEGIN(ClassInheritance);                 
                        }
	YY_BREAK

case 91:
YY_RULE_SETUP
#line 1097 "pyscanner.l"
{ // syntactic sugar for the list
                       }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1100 "pyscanner.l"
{ // begin of the class definition
			 g_specialBlock = TRUE; // expecting a docstring
                         current->bodyLine  = yyLineNr;
			 current->program.resize(0);
      			 BEGIN(ClassCaptureIndent);
                       }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1107 "pyscanner.l"
{
                         current->extends->append(
					      new BaseInfo(substitute(pyscanYYtext,".","::"),Public,Normal)
					    );
                         //Has base class-do stuff
                       }
	YY_BREAK


case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1117 "pyscanner.l"
{
                                 // Blankline - ignore, keep looking for indentation.
				 lineCount();
      				 current->program+=pyscanYYtext;
                               }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1123 "pyscanner.l"
{ // start of a comment block
				 initTriDoubleQuoteBlock();
      				 current->program+=pyscanYYtext;
			 	 BEGIN(TripleComment);
                      	       }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1129 "pyscanner.l"
{ // start of a comment block
			         initTriSingleQuoteBlock();
      				 current->program+=pyscanYYtext;
			         BEGIN(TripleComment);
                               }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1135 "pyscanner.l"
{
      				 current->program+=pyscanYYtext;
			         //current->startLine = yyLineNr;
				 g_curIndent=computeIndent(pyscanYYtext);
				 bodyEntry = current;
				 DBG_CTX((stderr,"setting indent %d\n",g_curIndent));
				 //printf("current->program=[%s]\n",current->program.data());
				 //g_hideClassDocs = TRUE;
			         BEGIN(ClassBody);
                               }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1146 "pyscanner.l"
{
				 
				 // Just pushback an empty class, and
				 // resume parsing the body.
                                 newEntry();
      				 current->program+=pyscanYYtext;

				 // printf("Failed to find indent - skipping!");
				 BEGIN( Search );
                               }
	YY_BREAK


case 99:
YY_RULE_SETUP
#line 1160 "pyscanner.l"
{ // the assignment operator
                        //printf("====== VariableDec at line %d\n",yyLineNr);
			current->initializer = pyscanYYtext;
			current->initializer += " ";
                      }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1165 "pyscanner.l"
{ // spaces
	              }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1167 "pyscanner.l"
{ // integer value
			current->type = "int";
			current->initializer += pyscanYYtext;
			BEGIN(VariableEnd);
		      }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1172 "pyscanner.l"
{ // floating point value
			current->type = "float";
			current->initializer += pyscanYYtext;
			BEGIN(VariableEnd);
		      }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1177 "pyscanner.l"
{ // string
			current->type = "string";
			current->initializer += pyscanYYtext;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
                        BEGIN( SingleQuoteString );
     		      }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1184 "pyscanner.l"
{ // string
			current->type = "string";
			current->initializer += pyscanYYtext;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
                        BEGIN( DoubleQuoteString );
     		      }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1191 "pyscanner.l"
{ // start of a comment block
			current->type = "string";
			current->initializer += pyscanYYtext;
			g_doubleQuote=TRUE;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1200 "pyscanner.l"
{ // start of a comment block
			current->type = "string";
			current->initializer += pyscanYYtext;
			g_doubleQuote=FALSE;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1208 "pyscanner.l"
{ // tuple
                        if (current->mtype!=Property)
			{
			  current->type = "tuple";
			}
      		        current->initializer+=*pyscanYYtext;
                        g_atomStart='(';
			g_atomEnd=')';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1219 "pyscanner.l"
{ // list
			current->type = "list";
      		        current->initializer+=*pyscanYYtext;
                        g_atomStart='[';
			g_atomEnd=']';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1227 "pyscanner.l"
{ // dictionary
			current->type = "dictionary";
      		        current->initializer+=*pyscanYYtext;
                        g_atomStart='{';
			g_atomEnd='}';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1235 "pyscanner.l"
{ // comment
                        BEGIN( VariableEnd ); 
                      }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1238 "pyscanner.l"
{
      		        current->initializer+=pyscanYYtext;
	              }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1241 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                      }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 1244 "pyscanner.l"
{
     		        unput('\n');
     			BEGIN( VariableEnd );
     		      }
	YY_BREAK


case 114:
YY_RULE_SETUP
#line 1251 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                        if (g_atomStart==*pyscanYYtext)
			{
			  g_atomCount++;
			}
                      }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1258 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                        if (g_atomEnd==*pyscanYYtext)
			{
			  g_atomCount--;
			}
			if (g_atomCount==0)
			{
			  BEGIN(VariableEnd);
			}
                      }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1269 "pyscanner.l"
{
       			g_stringContext=YY_START;
			current->initializer+="\"";
			g_copyString=&current->initializer;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1275 "pyscanner.l"
{
      		        current->initializer+=pyscanYYtext;
	              }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1278 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                      }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 1281 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
     			incLineNr();
     		      }
	YY_BREAK


case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 1289 "pyscanner.l"
{
                        incLineNr();
			newVariable();
                        BEGIN(Search);
                      }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1294 "pyscanner.l"
{ 
                        unput(*pyscanYYtext);
			newVariable();
                        BEGIN(Search);
      		      }
	YY_BREAK
case YY_STATE_EOF(VariableEnd):
#line 1299 "pyscanner.l"
{ yyterminate();
                        newEntry();
                      }
	YY_BREAK


case 122:
#line 1306 "pyscanner.l"
case 123:
YY_RULE_SETUP
#line 1306 "pyscanner.l"
{
			  // printf("Expected module block %d special=%d\n",g_expectModuleDocs,g_specialBlock);
			  if (g_doubleQuote==(pyscanYYtext[0]=='"')) 
			  {
			    if (g_specialBlock) // expecting a docstring
			    {
			      QCString actualDoc=docBlock;
			      if (!docBlockSpecial) // legacy unformatted docstring
			      {
			        actualDoc.prepend("\\verbatim ");
			        actualDoc.append("\\endverbatim ");
			      }
			      //printf("-------> current=%p bodyEntry=%p\n",current,bodyEntry);
			      handleCommentBlock(actualDoc, FALSE);
			    }
			    else if (g_packageCommentAllowed) // expecting module docs
			    {
			      QCString actualDoc=docBlock;
			      if (!docBlockSpecial) // legacy unformatted docstring
			      {
			        actualDoc.prepend("\\verbatim ");
			        actualDoc.append("\\endverbatim ");
			      }
			      actualDoc.prepend("\\namespace "+g_moduleScope+"\\_linebr ");
			      handleCommentBlock(actualDoc, FALSE);
			    }
			    if ((docBlockContext==ClassBody /*&& !g_hideClassDocs*/) ||
				docBlockContext==FunctionBody)
			    {
			      current->program+=docBlock;
			      current->program+=pyscanYYtext;
			    }
                            //if (g_hideClassDocs)
			    //{
                            //  current->startLine = yyLineNr;
			    //}
			    //g_hideClassDocs=FALSE;
			    BEGIN(docBlockContext);
			  }
                          else 
			  {
                            docBlock += pyscanYYtext;
                          }
			  g_packageCommentAllowed = FALSE;
                        }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1353 "pyscanner.l"
{ // leading whitespace
      			  int indent = computeIndent(pyscanYYtext);
			  if (indent>=g_curIndent)
			  { // strip g_curIndent amount of whitespace
			    int i;
			    for (i=0;i<indent-g_curIndent;i++) docBlock+=' ';
			    DBG_CTX((stderr,"stripping indent %d\n",g_curIndent));
			  }
			  else
			  {
			    DBG_CTX((stderr,"not stripping: %d<%d\n",indent,g_curIndent));
			    docBlock += pyscanYYtext;
			  }
      			}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1367 "pyscanner.l"
{
			  docBlock += pyscanYYtext;
                        }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1370 "pyscanner.l"
{
      			  incLineNr();
			  docBlock += pyscanYYtext;
      			}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1374 "pyscanner.l"
{
			  docBlock += pyscanYYtext;
      			}
	YY_BREAK


case 128:
YY_RULE_SETUP
#line 1380 "pyscanner.l"
{ // skip leading hashes
      			}
	YY_BREAK
case 129:
/* rule 129 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 1382 "pyscanner.l"
{ // continuation of the comment on the next line
      			  docBlock+='\n';
			  docBrief = FALSE;
                          startCommentBlock(FALSE);
			  incLineNr();
      			}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1388 "pyscanner.l"
{ // any other stuff
      			  docBlock+=pyscanYYtext;
      			}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 1391 "pyscanner.l"
{ // new line that ends the comment
			  handleCommentBlock(docBlock, docBrief);
      			  incLineNr();
			  BEGIN(docBlockContext);
      			}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1396 "pyscanner.l"
{ // anything we missed
      			  docBlock+=*pyscanYYtext;
      			}
	YY_BREAK


case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1402 "pyscanner.l"
{ // line continuation
      			         addToString(pyscanYYtext);
      				 incLineNr();
                               }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1406 "pyscanner.l"
{ // espaced char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1409 "pyscanner.l"
{ // tripple double quotes
      			         addToString(pyscanYYtext);
      			       }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1412 "pyscanner.l"
{ // end of the string
      			         addToString(pyscanYYtext);
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1416 "pyscanner.l"
{ // normal chars
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1419 "pyscanner.l"
{ // normal char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK


case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1425 "pyscanner.l"
{ // line continuation
      			         addToString(pyscanYYtext);
      				 incLineNr();
                               }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1429 "pyscanner.l"
{ // espaced char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1432 "pyscanner.l"
{ // tripple single quotes
      			         addToString(pyscanYYtext);
      			       }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1435 "pyscanner.l"
{ // end of the string
      			         addToString(pyscanYYtext);
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1439 "pyscanner.l"
{ // normal chars
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1442 "pyscanner.l"
{ // normal char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK


case 145:
#line 1449 "pyscanner.l"
case 146:
YY_RULE_SETUP
#line 1449 "pyscanner.l"
{
                          *g_copyString += pyscanYYtext;
			  if (g_doubleQuote==(pyscanYYtext[0]=='"')) 
			  {
			    BEGIN(g_stringContext);
			  }
                        }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1458 "pyscanner.l"
{
			  lineCount();
                          *g_copyString += pyscanYYtext;
                        }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1462 "pyscanner.l"
{
      			  incLineNr();
                          *g_copyString += pyscanYYtext;
      			}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1466 "pyscanner.l"
{
                          *g_copyString += *pyscanYYtext;
      			}
	YY_BREAK

/* ------------ End rules -------------- */
/*
<*>({NONEMPTY}|{EXPCHAR}|{BB})           { // This should go one character at a time.
				 // printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       pyscanYYtext, YY_START, yyLineNr);

                               }
  */
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1481 "pyscanner.l"
{
				 //printf("[pyscanner] %d NEWLINE [line %d] no match\n",
				 //       YY_START, yyLineNr);

                                 lineCount();
                               }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1488 "pyscanner.l"
{
				 //printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       pyscanYYtext, YY_START, yyLineNr);

                               }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1495 "pyscanner.l"
ECHO;
	YY_BREAK
#line 3596 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Search):
			case YY_STATE_EOF(SearchMemVars):
			case YY_STATE_EOF(TryClassDocString):
			case YY_STATE_EOF(TripleComment):
			case YY_STATE_EOF(SpecialComment):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(FunctionParamDefVal):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(ClassCaptureIndent):
			case YY_STATE_EOF(VariableDec):
			case YY_STATE_EOF(VariableAtom):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
			case YY_STATE_EOF(FromMod):
			case YY_STATE_EOF(FromModItem):
			case YY_STATE_EOF(Import):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pyscanYYin at a new source and called
			 * pyscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pyscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pyscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pyscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pyscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pyscanYYrestart(pyscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pyscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 450 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 450 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 449);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up pyscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pyscanYYrestart(pyscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pyscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pyscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pyscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pyscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE );
	}

	pyscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	pyscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pyscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pyscanYYpop_buffer_state();
	 *		pyscanYYpush_buffer_state(new_buffer);
     */
	pyscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pyscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pyscanYYwrap()) processing, but the only time this flag
	 * is looked at is after pyscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pyscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pyscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pyscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pyscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pyscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pyscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pyscanYY_create_buffer()
 * 
 */
    void pyscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pyscanYYfree((void *) b->yy_ch_buf  );

	pyscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pyscanYYrestart() or at EOF.
 */
    static void pyscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pyscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pyscanYY_init_buffer was _probably_
     * called from pyscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pyscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pyscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pyscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pyscanYYensure_buffer_stack();

	/* This block is copied from pyscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pyscanYY_switch_to_buffer. */
	pyscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pyscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pyscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pyscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pyscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)pyscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pyscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pyscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pyscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pyscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pyscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pyscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pyscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pyscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE pyscanYY_scan_string (yyconst char * yystr )
{
    
	return pyscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pyscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pyscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pyscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pyscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pyscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pyscanYYtext[pyscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = pyscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pyscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pyscanYYget_lineno  (void)
{
        
    return pyscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *pyscanYYget_in  (void)
{
        return pyscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *pyscanYYget_out  (void)
{
        return pyscanYYout;
}

/** Get the length of the current token.
 * 
 */
int pyscanYYget_leng  (void)
{
        return pyscanYYleng;
}

/** Get the current token.
 * 
 */

char *pyscanYYget_text  (void)
{
        return pyscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void pyscanYYset_lineno (int  line_number )
{
    
    pyscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see pyscanYY_switch_to_buffer
 */
void pyscanYYset_in (FILE *  in_str )
{
        pyscanYYin = in_str ;
}

void pyscanYYset_out (FILE *  out_str )
{
        pyscanYYout = out_str ;
}

int pyscanYYget_debug  (void)
{
        return pyscanYY_flex_debug;
}

void pyscanYYset_debug (int  bdebug )
{
        pyscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pyscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pyscanYYin = stdin;
    pyscanYYout = stdout;
#else
    pyscanYYin = (FILE *) 0;
    pyscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pyscanYYlex_init()
     */
    return 0;
}

/* pyscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int pyscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pyscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pyscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	pyscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    pyscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pyscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pyscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *pyscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pyscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see pyscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1495 "pyscanner.l"



//----------------------------------------------------------------------------

static void parseCompounds(Entry *rt)
{
  //printf("parseCompounds(%s)\n",rt->name.data());
  EntryListIterator eli(*rt->children());
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      inputString = ce->program;
      inputPosition = 0;
      pyscanYYrestart( pyscanYYin ) ;
      if (ce->section&Entry::COMPOUND_MASK)
      {
        current_root = ce ;
        BEGIN( Search );
      }
      else if (ce->parent())
      {
        current_root = ce->parent();
	//printf("Searching for member variables in %s parent=%s\n",
	//    ce->name.data(),ce->parent->name.data());
	BEGIN( SearchMemVars );
      }
      yyFileName = ce->fileName;
      yyLineNr   = ce->bodyLine ;
      if (current) delete current;
      current = new Entry;
      initEntry();

      groupEnterCompound(yyFileName,yyLineNr,ce->name);
      
      pyscanYYlex() ;
      g_lexInit=TRUE;
      delete current; current=0;
      ce->program.resize(0);

      groupLeaveCompound(yyFileName,yyLineNr,ce->name);

    }
    parseCompounds(ce);
  }
}

//----------------------------------------------------------------------------


static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();

  inputString = fileBuf;
  inputPosition = 0;

  protection    = Public;
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  g_specialBlock = FALSE;


  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    yyLineNr= 1 ; 
    yyFileName = fileName;
    //setContext();
    msg("Parsing file %s...\n",yyFileName.data());

    QFileInfo fi(fileName);
    g_moduleScope = findPackageScope(fileName);
    QCString baseName=fi.baseName().utf8();
    if (baseName!="__init__") // package initializer file is not a package itself
    {
      if (!g_moduleScope.isEmpty())
      {
	g_moduleScope+="::";
      }
      g_moduleScope+=baseName;
    }

    current            = new Entry;
    initEntry();
    current->name      = g_moduleScope;
    current->section   = Entry::NAMESPACE_SEC;
    current->type      = "namespace";
    current->fileName  = yyFileName;
    current->startLine = yyLineNr;
    current->bodyLine  = yyLineNr;

    rt->addSubEntry(current);

    current_root  = current ;
    initParser();
    current       = new Entry;

    groupEnterFile(yyFileName,yyLineNr);
    
    current->reset();
    initEntry();
    pyscanYYrestart( pyscanYYin );
    BEGIN( Search );
    pyscanYYlex();
    g_lexInit=TRUE;

    groupLeaveFile(yyFileName,yyLineNr);

    current_root->program.resize(0);
    delete current; current=0;

    parseCompounds(current_root);

    inputFile.close();
  }
  
}

//----------------------------------------------------------------------------

static void parsePrototype(const QCString &text)
{
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyFileName,yyLineNr,"Empty prototype found!");
    return;
  }

  g_specialBlock = FALSE;
  g_packageCommentAllowed = FALSE;

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  pyscanYY_switch_to_buffer(pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE));
  orgInputString = inputString; 
  orgInputPosition = inputPosition;

  // set new string
  inputString = text;
  inputPosition = 0;
  pyscanYYrestart( pyscanYYin );

  BEGIN( FunctionDec );

  pyscanYYlex();
  g_lexInit=TRUE;

  current->name = current->name.stripWhiteSpace();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state

  YY_BUFFER_STATE tmpBuf = YY_CURRENT_BUFFER;
  pyscanYY_switch_to_buffer(orgState);
  pyscanYY_delete_buffer(tmpBuf);

  inputString = orgInputString; 
  inputPosition = orgInputPosition;

  //printf("**** parsePrototype end\n");
}

void pyscanFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION) 
  if (g_lexInit)
  {
    pyscanYYlex_destroy();
  }
#endif
}

//----------------------------------------------------------------------------

void PythonLanguageScanner::parseInput(const char *fileName,
                                       const char *fileBuf,
                                       Entry *root,
                                       bool /*sameTranslationUnit*/,
                                       QStrList & /*filesInSameTranslationUnit*/)
{
  g_thisParser = this;
  ::parseMain(fileName,fileBuf,root);

  // May print the AST for debugging purposes
  // printAST(global_root);
}

bool PythonLanguageScanner::needsPreprocessing(const QCString &)
{
  return FALSE;
}

void PythonLanguageScanner::parseCode(CodeOutputInterface &codeOutIntf,
    const char *scopeName,
    const QCString &input,
    SrcLangExt /*lang*/,
    bool isExampleBlock,
    const char *exampleName,
    FileDef *fileDef,
    int startLine,
    int endLine,
    bool inlineFragment,
    MemberDef *memberDef,
    bool showLineNumbers,
    Definition *searchCtx
    )
{
  ::parsePythonCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
                    fileDef,startLine,endLine,inlineFragment,memberDef,
                    showLineNumbers,searchCtx);
}

void PythonLanguageScanner::parsePrototype(const char *text)
{
  ::parsePrototype(text);

}

void PythonLanguageScanner::resetCodeParserState()
{
  ::resetPythonCodeParserState();
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void pyscannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


